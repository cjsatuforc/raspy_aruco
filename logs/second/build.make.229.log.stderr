[01m[K/home/joaquin/catkin_ws/src/second/src/node0.cpp:223:1:[m[K [01;31m[Kerror: [m[Kâ€˜[01m[Kvel_msg[m[Kâ€™ does not name a type
 vel_msg.twist.linear.x = 0;
[01;32m[K ^[m[K
[01m[K/home/joaquin/catkin_ws/src/second/src/node0.cpp:224:1:[m[K [01;31m[Kerror: [m[Kâ€˜[01m[Kvel_msg[m[Kâ€™ does not name a type
 vel_msg.twist.linear.y = 0;
[01;32m[K ^[m[K
[01m[K/home/joaquin/catkin_ws/src/second/src/node0.cpp:225:1:[m[K [01;31m[Kerror: [m[Kâ€˜[01m[Kvel_msg[m[Kâ€™ does not name a type
 vel_msg.twist.linear.z = 0;
[01;32m[K ^[m[K
[01m[K/home/joaquin/catkin_ws/src/second/src/node0.cpp:[m[K In function â€˜[01m[Kvoid ar_callback(const Float32MultiArray&)[m[Kâ€™:
[01m[K/home/joaquin/catkin_ws/src/second/src/node0.cpp:234:14:[m[K [01;31m[Kerror: [m[Kbase operand of â€˜[01m[K->[m[Kâ€™ has non-pointer type â€˜[01m[Kconst Float32MultiArray {aka const std_msgs::Float32MultiArray_<std::allocator<void> >}[m[Kâ€™
     if (array->data.size() != 0) {  // Check if any marker detected.
[01;32m[K              ^[m[K
[01m[K/home/joaquin/catkin_ws/src/second/src/node0.cpp:235:19:[m[K [01;31m[Kerror: [m[Kbase operand of â€˜[01m[K->[m[Kâ€™ has non-pointer type â€˜[01m[Kconst Float32MultiArray {aka const std_msgs::Float32MultiArray_<std::allocator<void> >}[m[Kâ€™
         if ((array->data)[0] > 0) {
[01;32m[K                   ^[m[K
[01m[K/home/joaquin/catkin_ws/src/second/src/node0.cpp:237:25:[m[K [01;31m[Kerror: [m[Kbase operand of â€˜[01m[K->[m[Kâ€™ has non-pointer type â€˜[01m[Kconst Float32MultiArray {aka const std_msgs::Float32MultiArray_<std::allocator<void> >}[m[Kâ€™
         } else if (array->data[0] < 0) {
[01;32m[K                         ^[m[K
In file included from [01m[K/usr/include/boost/function/detail/maybe_include.hpp:18:0[m[K,
                 from [01m[K/usr/include/boost/function/detail/function_iterate.hpp:14[m[K,
                 from [01m[K/usr/include/boost/preprocessor/iteration/detail/iter/forward1.hpp:52[m[K,
                 from [01m[K/usr/include/boost/function.hpp:64[m[K,
                 from [01m[K/opt/ros/kinetic/include/ros/forwards.h:40[m[K,
                 from [01m[K/opt/ros/kinetic/include/ros/common.h:37[m[K,
                 from [01m[K/opt/ros/kinetic/include/ros/ros.h:43[m[K,
                 from [01m[K/home/joaquin/catkin_ws/src/second/src/node0.cpp:207[m[K:
/usr/include/boost/function/function_template.hpp: In instantiation of â€˜[01m[Kstatic void boost::detail::function::void_function_invoker1<FunctionPtr, R, T0>::invoke(boost::detail::function::function_buffer&, T0) [with FunctionPtr = void (*)(const std_msgs::Float32MultiArray_<std::allocator<void> >&); R = void; T0 = const boost::shared_ptr<const std_msgs::Float32MultiArray_<std::allocator<void> > >&][m[Kâ€™:
[01m[K/usr/include/boost/function/function_template.hpp:940:38:[m[K   required from â€˜[01m[Kvoid boost::function1<R, T1>::assign_to(Functor) [with Functor = void (*)(const std_msgs::Float32MultiArray_<std::allocator<void> >&); R = void; T0 = const boost::shared_ptr<const std_msgs::Float32MultiArray_<std::allocator<void> > >&][m[Kâ€™
[01m[K/usr/include/boost/function/function_template.hpp:728:7:[m[K   required from â€˜[01m[Kboost::function1<R, T1>::function1(Functor, typename boost::enable_if_c<boost::type_traits::ice_not<boost::is_integral<Functor>::value>::value, int>::type) [with Functor = void (*)(const std_msgs::Float32MultiArray_<std::allocator<void> >&); R = void; T0 = const boost::shared_ptr<const std_msgs::Float32MultiArray_<std::allocator<void> > >&; typename boost::enable_if_c<boost::type_traits::ice_not<boost::is_integral<Functor>::value>::value, int>::type = int][m[Kâ€™
[01m[K/usr/include/boost/function/function_template.hpp:1077:16:[m[K   required from â€˜[01m[Kboost::function<R(T0)>::function(Functor, typename boost::enable_if_c<boost::type_traits::ice_not<boost::is_integral<Functor>::value>::value, int>::type) [with Functor = void (*)(const std_msgs::Float32MultiArray_<std::allocator<void> >&); R = void; T0 = const boost::shared_ptr<const std_msgs::Float32MultiArray_<std::allocator<void> > >&; typename boost::enable_if_c<boost::type_traits::ice_not<boost::is_integral<Functor>::value>::value, int>::type = int][m[Kâ€™
[01m[K/home/joaquin/catkin_ws/src/second/src/node0.cpp:257:97:[m[K   required from here
[01m[K/usr/include/boost/function/function_template.hpp:118:11:[m[K [01;31m[Kerror: [m[Kinvalid initialization of reference of type â€˜[01m[Kconst std_msgs::Float32MultiArray_<std::allocator<void> >&[m[Kâ€™ from expression of type â€˜[01m[Kconst boost::shared_ptr<const std_msgs::Float32MultiArray_<std::allocator<void> > >[m[Kâ€™
           BOOST_FUNCTION_RETURN(f(BOOST_FUNCTION_ARGS));
[01;32m[K           ^[m[K
make[2]: *** [CMakeFiles/node0.dir/src/node0.cpp.o] Error 1
make[1]: *** [CMakeFiles/node0.dir/all] Error 2
make: *** [all] Error 2
